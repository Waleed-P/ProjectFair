NODE JS - SERVER SIDE TECHNOLOGY
--------------------------------
1.open source server environment - resolving client request
2.run js outside browser also uses in server
3.node.js uses asynchronous programming
4.modules in node.js : JS Libraries
    -built in modules :  predefined library
      -http , https, os url , fs etc..
      - require() : to import use modules in js file use require('library') method
    - userDefined Modules : 
        - module.exports / exports. : used to export data from a js file


Example to read  a text file in the js file:

    const fs= require("fs")
    fs.readFile('./demo.txt',"utf-8",(err,data)=>{
        console.log(data)
    })

Exmaple to export and import a function:
Export:
    const first ="first"
    const showData =()=>{
        console.log(`inside show data :${first}`);
    }

    module.exports = {showData} 
import:
    const first = require('./first.js')
    const SECOND ="second"
    first.showData()

5.Global objects / variables node js
 -without importing we can use a data throught our code
 - ex : process variables :
  - process.env : environment variable - used to share runtime data throught  the process
6.framework of node js (there is some predefined class something that we can use but cant change it)
 -express js : used in clent server / event driven application

7.CORS : cross origin resource sharing - used to share resource b/w two application in the internet

EXPRESS JS - NODE JS FRAMEWORK 
-------------------------------
Steps to build express server
 1.create a folder for server
 2.create package.json file : npm init -y
 3.update scripts in package.json file as "start":"node index.js" instead of test
 4.install external packages to build server
  - express, cors, dotenv
  - npm i express cors dotenv
 5.create .env file to add  environment variable
 6.create a .gitignore file to add files to be ignored
  - node_modules , .env
 7.create index.js file to build server
  - import dotenv, cors, express
  - create express server 
  - use cors middleware in express server
  - use express.json() in server to parse data in the request
  - use router in server
  - setup  port number in express server
  - run the server to listen client request
  - to resolve http request using express
   - express-server.httprequest(path,callback)
  - to setup indeependent routes for each request in express server
   7.1 - create routes folder : to setup path for eact http request
        - inside routes folder create router.js file to define route/
        path for resolving eacg request
        - import expresss
        - create object for router class of express to setup routes
        - export router and use it in the index.js server app
     - create object for router class of express to setup routes
       - inside the folder , create a js file 
  8. to run server app : node index.js / nodemon index.js
(express used to create server and cors is protocol used to transfer data berween two application in the internet)


MONGO DB - DATABASE
---------------------
- structerless DATABASE
- data stored as document
  -document is similar as JSON 
  - _id : every document  has unique id generated by mongodb
-collection : collection of documents
- multiple collection be hold in single db
- common commands in mongodb
 * show databases :  show all the database in the mongo db
 * use database :  use the database
 * show collections :  show all the collection in the database
 * db.collection_name.find() :  find all the document in the collection
 * db.collection_name.findOne({email:"user@gmail.com"}) : to find the document with  the given email
 * db.collection_name.insertOne({name:"user",email:"user@gmail.com"}) : to insert one document in a collection
 * db.collection_name.insertMany([{name:"user1",email:"user1@gmail.com"},{name:"user2",email:"user2@gmail.com"}])
 * count() : db.collection_name.find().count() : display total  number of document in the collection
 * update() : db.collection_name.updateMany({age:23},{$set:{age:25}})
            : db.collection_name.updateOne({username:"user},{$inc:{age:3}}) - increment age by three
            : to set a value use  $set
            : db,users.updateOne({uname:"user"},{$push:{hobbies:"dancing"}})  - add a value in the array
 *  delete() : db.collection_name.deleteOne({username:"user"})
             : db.collection_name.deleteMany({username:"user"})

 # Querying statements:
   * $exists - db.users.find({ uname: { $exists: true } })
             - db.users.find({ uname: { $exists: true } }).count()
   * $gt - db.users.find({age:{$gt:25}})
   * $lt - db.users.find({age:{$lt:25}})
         - db.users.find({age:{$gt:23,$lt:30}})
   * $gte / $lte
   * $eq
   * $nin
   * $and
   * $or
   * $expr - used to compare two key value in a single document
           - db.users.find({$expr:{$gt:["dept","balance"]}})
   *$push-  db.users.updateOne({uname:"user"},{$push:{hobbies:"dancing"}})
   *$pull - db.users.updateOne({uname:"user"},{$pull:{hobbies:"dancing"}})
   * compine two collections : db.users.aggregate({$lookup:{from:"projects",localField:"_id",foreignField:"userId",as:"allProjects"}})

MONGODB SETUP 
--------------
1. GO TO MOGO DB ATLAS REGISTER PAGE 
2. SIGN UP , FILL THE FIELDS AND FINISH it
3. CHOOSE FREE PLAN AND CLICK ON CREATE DEPLOYMENT
4. ON THE LEFT CORNER PROJECTS CREATE NEW PROJECT , PROVIDE NAME AND CONTINUE , CLICK ON CREATE PROJECT
5. CLICK DATABASE FROM THE LEFT SIDEBAR , CLICK ON CREATE DATABASE BUTTON ,CHOOSE FREE AND CREATE DEPLOYMENT 
6. CLOSE THE POPUP  , GOTO DATABASE , CLICK ON BROWSE COLLECTION , CLICK ON CREAE DATABASE  BUTTON
6. PROVIDE NAME WITHOUT SPACE , PROVIDE COLLECTION NAME , CLICK ON CREATE 
7. NAVIGATE TO DATABASE CLICK ON CONNECT , PROVIDE USERNAME AND PASSWORD , CLICK ON CREATE DATABASE USER , CLICK ON CHOOSE A CONNECTION METHOD
8. CLICK ON DRIVERS , INSTALL MONGO DB IF NOT INSTALLED , COPY THE CONNECTION STRING , CLICK ON REVIEW SETUP PAGES 
9. NAVIGATE TO NETWORK ACCESSS IN THE LEFT SIDE BAR , CLICK ON EDIT IN THE IP ADDRESS , CLICK ON THE ALLOW ACCES FOR EVERYONE AND CLICK CONFIRM 

CONNECTION_STRING = mongodb+srv://MohdWaleed:waleed@cluster0.axdgs.mongodb.net/projectFairDB?retryWrites=true&w=majority&appName=Cluster0
PROVIDE PASSWORD AND COLLECTION NAME IN THE ABOVE LINK , PROVIDE COLLECTION NAME AFTER .net/


MONGOOSE - ODM (Object data model for mongodb to node.js)
-----------------------------------------------------------
- mongoose is a library that helps to interact with mongodb
1. install mongoose  : npm install mongoose --save
2. connect db with nodejs
   - create a folder for defining db connection, create file named connection.js
   - import mongoose in that file
   - schema : structure of data /document to be stored in db
    * create object for mongoose.schema class 
    * schema types
  - Modal : collection of documents
   * Mongoose.model(model-name.schema)
   * node app will communicate with model instead of mongodb directly


   JWT - JSON WEB TOKEN (AUTHORIZATION)
   --------------------------------
   1. install jwt -  npm install jsonwebtoken
   2. import library where you want to use
   3.  create token - jwt.sign(payload,secretKey,option)
      - payload :  data to be stored in token
      - secretKey :  secret key to be used for encryption , similar to password
   4. to verify token
    - jwt.verfy(token,secretOrPrivateKey)



MIDDLEWARE : iS a function used to resolve a task before resolving the client request
  - is actually a function with 3  parameters : req,res,next
   -next argument controlls the client request processing
  - types of middlewares
    - application specific middleware : middleware become active whenver a client request recieved by the server 
    - router specific middleware : middleware active only at the route where we apply

MULTER - NODE JS MIDDLEWARE 
---------------------------
1.used to handle multipart/form data , which is primerly used for uploading files
2.it is router middleware
3. npm install multer
4.multer add a body object and a file or files objec to the request object
5.the body object contain the values of the text fields of the form 
6.file or files object contains the files  uploaded by the user
7. it can manage upload file in server 
